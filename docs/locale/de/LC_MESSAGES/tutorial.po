# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Radomir Dopieralski
# This file is distributed under the same license as the PewPew FeatherWing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PewPew FeatherWing 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-03 13:55+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../tutorial.rst:2
msgid "Bouncing Ball Tutorial"
msgstr ""

#: ../../tutorial.rst:4
msgid ""
"Let's try to write a simple bouncing ball demo, where a single pixel "
"moves around the screen and bounces off its edges. This will let us get "
"familiar with the library."
msgstr ""

#: ../../tutorial.rst:8
msgid ""
"Start by creating a file called \"code.py\" --- that is where all our "
"code will go. As long as such a file exists, PewPew will try to run it on"
" startup and on reset. Later, when you finish working on your game, you "
"can rename it to whatever you call your game, and then PewPew will fall "
"back to running \"main.py\", which contains the game selection menu."
msgstr ""

#: ../../tutorial.rst:14
msgid ""
"To use the PewPew library, we need to first import it into our code. So "
"we need to start with this line::"
msgstr ""

#: ../../tutorial.rst:18
msgid ""
"Then we need to tell the library to switch the display on and generally "
"prepare everything for displaying our ball. We do that by calling the "
"``init`` function like this::"
msgstr ""

#: ../../tutorial.rst:27
msgid ""
"We will want our demo program to run all the time in a loop, so we will "
"need an infinite loop. We can limit the loop's speed to run 12 times a "
"second, which is slow enough to see the movements, but not too slow::"
msgstr ""

#: ../../tutorial.rst:38
msgid ""
"Now, we will need an image that we will display on the screen. In PewPew,"
" images are represented as ``Pix`` objects. So we can create an empty "
"image the size of the display, and display it in out loop::"
msgstr ""

#: ../../tutorial.rst:51
msgid ""
"Now we will add our pixel. We will make it start at coordinates ``0, 0``,"
" and we will draw it with color ``3``, which is the brightest::"
msgstr ""

#: ../../tutorial.rst:66
msgid "Now let's make the pixel actually move::"
msgstr ""

#: ../../tutorial.rst:84
msgid ""
"After running this, you will see a diagonal line on the display. That's "
"because the old positions of the pixel are not getting deleted, and "
"because the pixel keeps on going forever outside the screen. We can fix "
"that. Let's start by deleting the old position::"
msgstr ""

#: ../../tutorial.rst:106
msgid ""
"We simply draw a black pixel at the old position before drawing a bright "
"one at the new one. Since we only update the screen once a frame, those "
"two operations are visible at the same time. Now, let's make the pixel "
"bounce off the edges::"
msgstr ""

#: ../../tutorial.rst:131
msgid ""
"We had to move our starting point a bit, because otherwise it will get "
"stuck in the corner. Now you should see our pixel going from one corner "
"to the other. That's neat, but a little bit boring. Maybe if we changed "
"the starting position it would be better::"
msgstr ""

#: ../../tutorial.rst:157
msgid ""
"Maybe we could affect the ball's behavior with the buttons? For instance,"
" pressing `O` could make it bounce horizontally, and pressing `X` "
"vertically::"
msgstr ""

#: ../../tutorial.rst:182
msgid ""
"Could we have a nicer background than just black? Let's try a check "
"board::"
msgstr ""

#: ../../tutorial.rst:216
msgid ""
"Instead of deleting our pixel with a black pixel, we simply copy the "
"whole background all over the screen, and then draw our pixel in the new "
"position."
msgstr ""

#: ../../tutorial.rst:219
msgid "How about making the ball larger::"
msgstr ""

#: ../../tutorial.rst:257
msgid "We had to adjust the boundaries of the screen for the larger ball here."
msgstr ""

#: ../../tutorial.rst:259
msgid "Now experiment with this code yourself and see what you can make."
msgstr ""

